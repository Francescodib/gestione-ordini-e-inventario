// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  emailVerified Boolean @default(false)
  avatar    String?  // URL to avatar image
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]
  userAvatar UserAvatar?

  @@map("users")
}

// Category model
model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  slug        String   @unique
  isActive    Boolean  @default(true)
  parentId    String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

// Product model
model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  sku         String        @unique
  barcode     String?
  categoryId  String
  price       Float
  costPrice   Float
  stock       Int           @default(0)
  minStock    Int           @default(0)
  maxStock    Int?
  weight      Float?
  images      String?       // JSON string array
  tags        String?       // JSON string array
  status      ProductStatus @default(ACTIVE)
  supplier    String?       // JSON object
  dimensions  String?       // JSON object
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  productImages ProductImage[]

  @@map("products")
}

// Order model
model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Float
  shippingCost    Float         @default(0)
  taxAmount       Float         @default(0)
  discountAmount  Float         @default(0)
  totalAmount     Float
  currency        String        @default("EUR")
  shippingAddress String        // JSON object
  billingAddress  String?       // JSON object
  notes           String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  cancelledAt     DateTime?
  cancelReason    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

// OrderItem model (junction table)
model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  productId  String
  name       String // Product name at time of order
  sku        String // Product SKU at time of order
  quantity   Int
  price      Float  // Price at time of order
  totalPrice Float  // quantity * price

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

// Product Image model for file uploads
model ProductImage {
  id            String   @id @default(cuid())
  productId     String
  filename      String
  originalName  String
  thumbnailPath String
  mediumPath    String
  largePath     String
  originalPath  String
  isPrimary     Boolean  @default(false)
  sortOrder     Int      @default(0)
  fileSize      Int
  mimetype      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// User Avatar model
model UserAvatar {
  id           String   @id @default(cuid())
  userId       String   @unique
  filename     String
  originalName String
  smallPath    String
  mediumPath   String
  largePath    String
  fileSize     Int
  mimetype     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_avatars")
}

// Generic uploaded files model
model UploadedFile {
  id           String    @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  fileSize     Int
  filePath     String
  url          String
  type         String    // 'image', 'document', 'avatar'
  entityId     String?   // ID of related entity (product, user, etc.)
  entityType   String?   // Type of related entity ('product', 'user', etc.)
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("uploaded_files")
}